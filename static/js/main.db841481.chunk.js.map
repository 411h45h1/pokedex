{"version":3,"sources":["context/AppContext.js","context/reducer.js","components/PokedexInput.js","components/PokedexOutput.js","components/tools/capitalize.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","globalPokedexIndex","pokeDexEntry","reducer","state","type","payload","DexInput","useContext","dispatch","useState","pokemon","pokemonForm","setPokemonForm","getEntry","entry","a","entryFound","find","obj","name","dataURL","url","fetch","catch","err","console","log","entryDataFetch","json","pokedexDataEntry","capitalizeString","id","primarySprite","sprites","front_default","types","Segment","inverted","color","style","textAlign","minHeight","Form","onSubmit","then","res","photo","Input","placeholder","value","onChange","e","prevState","Button","content","DexOutput","alt","src","height","width","map","i","string","charAt","toUpperCase","slice","App","initialState","useReducer","useEffect","getGlobalPokedexIndex","error","fetchPokedex","pokedexIndex","results","Provider","fontWeight","fontSize","marginBottom","Grid","Row","margin","Column","PokedexInput","PokedexOutput","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.db841481.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext({\r\n  globalPokedexIndex: null,\r\n  pokeDexEntry: null,\r\n});\r\n\r\nexport default AppContext;\r\n","export default function reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    // Load\r\n    case \"GET_POKEDEX_INDEX\":\r\n      return {\r\n        ...state,\r\n        globalPokedexIndex: payload,\r\n      };\r\n    case \"UPDATE_POKEDEX_ENTRY\":\r\n      return {\r\n        ...state,\r\n        pokeDexEntry: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Form, Segment } from \"semantic-ui-react\";\r\nimport AppContext from \"../context/AppContext\";\r\nimport { capitalizeString } from \".\";\r\n\r\nconst DexInput = () => {\r\n  const { state, dispatch } = useContext(AppContext);\r\n  const { globalPokedexIndex } = state;\r\n  const [pokemonForm, setPokemonForm] = useState({ pokemon: \"\" });\r\n\r\n  const getEntry = async (entry) => {\r\n    //get pokemon source url\r\n    let entryFound = globalPokedexIndex.find((obj) => obj.name === entry);\r\n    let dataURL = entryFound.url;\r\n    //get pokemon data\r\n    let entryDataFetch = await fetch(`${dataURL}`).catch((err) =>\r\n      console.log(err)\r\n    );\r\n\r\n    let pokedexDataEntry = await entryDataFetch.json();\r\n    //value return\r\n    let name = capitalizeString(pokedexDataEntry.name);\r\n    let id = pokedexDataEntry.id;\r\n    let primarySprite = pokedexDataEntry.sprites.front_default;\r\n    let types = pokedexDataEntry.types;\r\n\r\n    console.log(`Selected Pokemon: ( #${id}, ${name} )`);\r\n    return { name, primarySprite, id, types };\r\n  };\r\n\r\n  const handleChange = (e, { pokemon, value }) =>\r\n    setPokemonForm((prevState) => {\r\n      return { ...prevState, [pokemon]: value };\r\n    });\r\n\r\n  const handleSubmit = () =>\r\n    getEntry(pokemonForm.pokemon)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: \"UPDATE_POKEDEX_ENTRY\",\r\n          payload: {\r\n            photo: res.primarySprite,\r\n            name: res.name,\r\n            id: res.id,\r\n            types: res.types,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => console.log(\"Error @ Submit\"));\r\n\r\n  return (\r\n    <Segment\r\n      inverted\r\n      color=\"brown\"\r\n      style={{ textAlign: \"center\", minHeight: 600 }}\r\n    >\r\n      <div>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Input\r\n            placeholder=\"Pokemon name\"\r\n            pokemon=\"pokemon\"\r\n            value={pokemonForm.pokemon}\r\n            onChange={handleChange}\r\n          />\r\n\r\n          <Form.Button content=\"Submit\" />\r\n        </Form>\r\n      </div>\r\n    </Segment>\r\n  );\r\n};\r\nexport default DexInput;\r\n","import React, { useContext } from \"react\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport AppContext from \"../context/AppContext\";\r\nimport { capitalizeString } from \".\";\r\n\r\nconst DexOutput = () => {\r\n  const { state } = useContext(AppContext);\r\n  const { pokeDexEntry } = state;\r\n  return (\r\n    <Segment\r\n      inverted\r\n      color=\"grey\"\r\n      style={{ textAlign: \"center\", minHeight: 600 }}\r\n    >\r\n      {pokeDexEntry ? (\r\n        <div>\r\n          <p> Name: {pokeDexEntry.name}</p>\r\n          <p>Pokédex #{pokeDexEntry.id}</p>\r\n          <img\r\n            alt=\"Pokemon\"\r\n            src={pokeDexEntry.photo}\r\n            height=\"250\"\r\n            width=\"250\"\r\n          />\r\n          <p>\r\n            Types:\r\n            {pokeDexEntry.types.map(\r\n              (i) => \" \" + capitalizeString(i.type.name) + \" \"\r\n            )}\r\n          </p>\r\n        </div>\r\n      ) : null}\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default DexOutput;\r\n","const capitalizeString = (string) =>\r\n  string.charAt(0).toUpperCase() + string.slice(1);\r\nexport default capitalizeString;\r\n","import React, { useEffect, useContext, useReducer } from \"react\";\n\n//style lib\nimport { Grid } from \"semantic-ui-react\";\n//context\nimport AppContext from \"./context/AppContext\";\nimport reducer from \"./context/reducer\";\n//components\nimport { PokedexInput, PokedexOutput } from \"./components\";\n\nconst App = () => {\n  const initialState = useContext(AppContext);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { globalPokedexIndex } = state;\n\n  useEffect(() => {\n    if (!globalPokedexIndex) {\n      getGlobalPokedexIndex();\n    }\n  }, [globalPokedexIndex]);\n\n  const getGlobalPokedexIndex = async () => {\n    let fetchPokedex = await fetch(\n      \"https://pokeapi.co/api/v2/pokemon?limit=809\"\n    ).catch((err) => console.error(err));\n    let pokedexIndex = await fetchPokedex.json();\n    return dispatch({\n      type: \"GET_POKEDEX_INDEX\",\n      payload: pokedexIndex.results,\n    });\n  };\n\n  return (\n    globalPokedexIndex && (\n      <AppContext.Provider value={{ state, dispatch }}>\n        <h1\n          style={{\n            textAlign: \"center\",\n            fontWeight: \"bold\",\n            fontSize: 75,\n            marginBottom: -5,\n          }}\n        >\n          Ahmed's Pokédex\n        </h1>\n\n        <Grid>\n          <Grid.Row style={{ margin: \"0px 100px 0px 100px \" }}>\n            <Grid.Column width={8}>\n              {/*Left Square*/}\n              <PokedexInput />\n            </Grid.Column>\n            <Grid.Column width={8}>\n              {/*Right Square*/}\n              <PokedexOutput />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </AppContext.Provider>\n    )\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}